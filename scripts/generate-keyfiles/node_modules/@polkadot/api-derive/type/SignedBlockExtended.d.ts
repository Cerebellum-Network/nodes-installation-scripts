import type { AccountId, DispatchError, DispatchInfo, Event, EventRecord, Extrinsic, SignedBlock } from '@polkadot/types/interfaces';
import type { Constructor, Registry } from '@polkadot/types/types';
declare const _SignedBlock: Constructor<SignedBlock>;
interface TxWithEvent {
    dispatchError?: DispatchError;
    dispatchInfo?: DispatchInfo;
    events: Event[];
    extrinsic: Extrinsic;
}
/**
 * @name SignedBlockExtended
 * @description
 * A [[Block]] header with an additional `author` field that indicates the block author
 */
export declare class SignedBlockExtended extends _SignedBlock {
    #private;
    constructor(registry: Registry, block?: SignedBlock, events?: EventRecord[], sessionValidators?: AccountId[]);
    /**
     * @description Convenience method, returns the author for the block
     */
    get author(): AccountId | undefined;
    /**
     * @description Convenience method, returns the events associated with the block
     */
    get events(): EventRecord[];
    /**
     * @description Returns the extrinsics and their events, mapped
     */
    get extrinsics(): TxWithEvent[];
}
export {};
