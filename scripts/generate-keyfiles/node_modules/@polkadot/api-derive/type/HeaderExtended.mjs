import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { Struct } from '@polkadot/types';
import runtimeTypes from '@polkadot/types/interfaces/runtime/definitions';
import { extractAuthor } from "./util.mjs"; // We can ignore the properties, added via Struct.with

const _Header = Struct.with(runtimeTypes.types.Header);
/**
 * @name HeaderExtended
 * @description
 * A [[Block]] header with an additional `author` field that indicates the block author
 */


var _author = _classPrivateFieldLooseKey("author");

var _validators = _classPrivateFieldLooseKey("validators");

export class HeaderExtended extends _Header {
  constructor(registry, header, validators) {
    super(registry, header);
    Object.defineProperty(this, _author, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _validators, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldLooseBase(this, _author)[_author] = extractAuthor(this.digest, validators);
    _classPrivateFieldLooseBase(this, _validators)[_validators] = validators;
  }
  /**
   * @description Convenience method, returns the author for the block
   */


  get author() {
    return _classPrivateFieldLooseBase(this, _author)[_author];
  }
  /**
   * @description Convenience method, returns the validators for the block
   */


  get validators() {
    return _classPrivateFieldLooseBase(this, _validators)[_validators];
  }

}