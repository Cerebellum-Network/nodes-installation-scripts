// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34
import { assert, u8aConcat } from '@polkadot/util';
import { base58Encode } from "../base58/encode.mjs";
import { decodeAddress } from "./decode.mjs";
import { defaults } from "./defaults.mjs";
import { sshash } from "./sshash.mjs";
export function encodeAddress(_key, ss58Format = defaults.prefix) {
  // decode it, this means we can re-encode an address
  const key = decodeAddress(_key);
  assert(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');
  assert(defaults.allowedDecodedLengths.includes(key.length), `Expected a valid key to convert, with length ${defaults.allowedDecodedLengths.join(', ')}`);
  const isPublicKey = [32, 33].includes(key.length);
  const input = u8aConcat(new Uint8Array(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6]), key);
  return base58Encode(u8aConcat(input, sshash(input).subarray(0, isPublicKey ? 2 : 1)));
}