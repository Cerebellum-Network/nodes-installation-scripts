import type { MetadataLatest, MetadataV9, MetadataV10, MetadataV11, MetadataV12 } from '@polkadot/types/interfaces/metadata';
import type { AnyJson, Registry } from '@polkadot/types/types';
import { Struct } from '@polkadot/types/codec';
import { MagicNumber } from './MagicNumber';
/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */
export declare class MetadataVersioned extends Struct {
    #private;
    constructor(registry: Registry, value?: unknown);
    private _assertVersion;
    private _getVersion;
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */
    get asCallsOnly(): MetadataVersioned;
    /**
     * @description Returns the wrapped metadata as a V9 object
     */
    get asV9(): MetadataV9;
    /**
     * @description Returns the wrapped values as a V10 object
     */
    get asV10(): MetadataV10;
    /**
     * @description Returns the wrapped values as a V11 object
     */
    get asV11(): MetadataV11;
    /**
     * @description Returns the wrapped values as a V12 object
     */
    get asV12(): MetadataV12;
    /**
     * @description Returns the wrapped values as a latest version object
     */
    get asLatest(): MetadataLatest;
    /**
     * @description
     */
    get magicNumber(): MagicNumber;
    /**
     * @description the metadata wrapped
     */
    private get _metadata();
    /**
     * @description the metadata version this structure represents
     */
    get version(): number;
    getUniqTypes(throwError: boolean): string[];
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */
    toJSON(): Record<string, AnyJson>;
}
