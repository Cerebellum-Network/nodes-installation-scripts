import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";
// Copyright 2017-2021 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { Struct } from '@polkadot/types/codec';
import { assert } from '@polkadot/util';
import { toV10 } from "./v9/toV10.mjs";
import { toV11 } from "./v10/toV11.mjs";
import { toV12 } from "./v11/toV12.mjs";
import { toLatest } from "./v12/toLatest.mjs";
import { MagicNumber } from "./MagicNumber.mjs";
import { getUniqTypes, toCallsOnly } from "./util/index.mjs";

var _converted = _classPrivateFieldLooseKey("converted");

/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */
export class MetadataVersioned extends Struct {
  constructor(registry, value) {
    super(registry, {
      magicNumber: MagicNumber,
      metadata: 'MetadataAll'
    }, value);
    Object.defineProperty(this, _converted, {
      writable: true,
      value: new Map()
    });
  }

  _assertVersion(version) {
    assert(this.version <= version, `Cannot convert metadata from v${this.version} to v${version}`);
    return this.version === version;
  }

  _getVersion(version, fromPrev) {
    const asCurr = `asV${version}`;
    const asPrev = `asV${version - 1}`;

    if (this._assertVersion(version)) {
      return this._metadata[asCurr];
    }

    if (!_classPrivateFieldLooseBase(this, _converted)[_converted].has(version)) {
      _classPrivateFieldLooseBase(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev], this.version));
    }

    return _classPrivateFieldLooseBase(this, _converted)[_converted].get(version);
  }
  /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */


  get asCallsOnly() {
    return new MetadataVersioned(this.registry, {
      magicNumber: this.magicNumber,
      metadata: this.registry.createType('MetadataAll', toCallsOnly(this.registry, this.asLatest), this.version)
    });
  }
  /**
   * @description Returns the wrapped metadata as a V9 object
   */


  get asV9() {
    this._assertVersion(9);

    return this._metadata.asV9;
  }
  /**
   * @description Returns the wrapped values as a V10 object
   */


  get asV10() {
    return this._getVersion(10, toV10);
  }
  /**
   * @description Returns the wrapped values as a V11 object
   */


  get asV11() {
    return this._getVersion(11, toV11);
  }
  /**
   * @description Returns the wrapped values as a V12 object
   */


  get asV12() {
    return this._getVersion(12, toV12);
  }
  /**
   * @description Returns the wrapped values as a latest version object
   */


  get asLatest() {
    // This is non-existent & latest - applied here to do the module-specific type conversions
    return this._getVersion(13, toLatest);
  }
  /**
   * @description
   */


  get magicNumber() {
    return this.get('magicNumber');
  }
  /**
   * @description the metadata wrapped
   */


  get _metadata() {
    return this.get('metadata');
  }
  /**
   * @description the metadata version this structure represents
   */


  get version() {
    return this._metadata.index;
  }

  getUniqTypes(throwError) {
    return getUniqTypes(this.registry, this.asLatest, throwError);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    // HACK(y): ensure that we apply the aliasses if we have not done so already, this is
    // needed to ensure we have the overrides as intended (only applied in toLatest)
    // eslint-disable-next-line no-unused-expressions
    this.asLatest;
    return super.toJSON();
  }

}